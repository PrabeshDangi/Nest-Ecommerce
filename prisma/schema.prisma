// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  admin
  user
}

enum Size {
  sm
  m
  l
  xl
  xxl
}

model User {
  id              Int            @id @default(autoincrement())
  name            String
  email           String         @unique
  password        String
  phone           String         @unique
  isEmailVerified Boolean        @default(false)
  cart            Cart[]
  role            UserRole       @default(user)
  Wishlist        Wishlist[]
  PasswordReset   PasswordReset?
  ratings         Rating[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@index([email])
  @@index([phone])
}

model Product {
  id            Int        @id @default(autoincrement())
  title         String
  price         Float
  image         String[]
  discounttag   Boolean?
  discountprice Float?
  sizes         Size?
  returnpolicy  String
  description   String
  brand         String
  availability  Boolean
  categories    Category[] @relation("ProductCategories")
  Cart          Cart[]
  onSale        Boolean    @default(false)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  Wishlist      Wishlist[]
  bannerId      Int?
  banners       Banner[]   @relation("BannerProducts")
  stock         Int        @default(1)
  soldqunatity  Int?       @default(0)
  ratings       Rating[]

  Flashitem   Flashitem? @relation(fields: [flashitemId], references: [id], onDelete: Cascade)
  flashitemId Int?
}

model Rating {
  id        Int      @id @default(autoincrement())
  rating    Int
  comment   String?
  userId    Int
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Flashitem {
  id        Int       @id @default(autoincrement())
  saleStart DateTime  @default(now())
  saleEnd   DateTime
  products  Product[]
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  products Product[] @relation("ProductCategories")
}

model Cart {
  id        Int     @id @default(autoincrement())
  userId    Int
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int     @default(1)

  @@unique([userId, productId])
}

model Wishlist {
  id        Int     @id @default(autoincrement())
  userId    Int
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

model Banner {
  id       Int       @id @default(autoincrement())
  title    String
  products Product[] @relation("BannerProducts")
}

model PasswordReset {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  otpHash   String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@index([userId])
}
