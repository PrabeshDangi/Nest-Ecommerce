// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  admin
  user
}

enum Size {
  sm
  m
  l
  xl
  xxl
}

enum CouponType {
  percentage
  fixed_Amount
}

enum PaymentGateway {
  KHALTI
  ESEWA
  CONNECTIPS
}

enum PaymentStatus {
  SUCCESS
  PENDING
  FAILED
}

model User {
  id              Int            @id @default(autoincrement())
  name            String
  email           String         @unique
  password        String
  phone           String         @unique
  isEmailVerified Boolean        @default(false)
  cart            Cart[]
  role            UserRole       @default(user)
  Wishlist        Wishlist[]
  PasswordReset   PasswordReset?
  ratings         Rating[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  UserCoupon      UserCoupon[]

  @@index([email])
  @@index([phone])
}

model Product {
  id            Int        @id @default(autoincrement())
  title         String
  price         Float
  image         String[]
  discounttag   Boolean?
  discountprice Float?
  sizes         Size?
  returnpolicy  String
  description   String
  brand         String
  availability  Boolean    @default(true)
  onSale        Boolean    @default(false)
  soldqunatity  Int?       @default(0)
  createdAt     DateTime   @default(now())
  stock         Int        @default(1)
  updatedAt     DateTime   @updatedAt
  Cart          Cart[]
  Wishlist      Wishlist[]
  ratings       Rating[]
  bannerId      Int?
  banners       Banner[]   @relation("BannerProducts")
  categories    Category[] @relation("ProductCategories")
  flashitemId   Int?
  Flashitem     Flashitem? @relation(fields: [flashitemId], references: [id], onDelete: Cascade)
}

model Rating {
  id        Int      @id @default(autoincrement())
  rating    Int
  comment   String?
  userId    Int
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Flashitem {
  id        Int       @id @default(autoincrement())
  saleStart DateTime  @default(now())
  saleEnd   DateTime
  products  Product[]
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  products Product[] @relation("ProductCategories")
}

model Cart {
  id        Int     @id @default(autoincrement())
  userId    Int
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int     @default(1)

  @@unique([userId, productId])
}

model Wishlist {
  id        Int     @id @default(autoincrement())
  userId    Int
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

model Banner {
  id       Int       @id @default(autoincrement())
  title    String
  products Product[] @relation("BannerProducts")
}

model PasswordReset {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  otpHash   String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@index([userId])
}

model Storycontent {
  id        Int      @id @default(autoincrement())
  title     String
  body      String
  image     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Service {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  icon        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Statistics {
  id          Int      @id @default(autoincrement())
  value       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Employee {
  id        Int      @id @default(autoincrement())
  name      String
  position  String
  image     String
  twitter   String?
  linkedin  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Coupon {
  id                Int          @id @default(autoincrement())
  code              String       @unique
  name              String
  type              CouponType
  value             Float
  expirationDate    DateTime
  startDate         DateTime?
  maxUsageCount     Int
  currentUsageCount Int          @default(0)
  isActive          Boolean      @default(true)
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  userCoupons       UserCoupon[]
}

model UserCoupon {
  id        Int       @id @default(autoincrement())
  userId    Int
  couponId  Int
  isUsed    Boolean   @default(false)
  usedAt    DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  coupon Coupon @relation(fields: [couponId], references: [id])
}

model Payment {
  id                      Int            @id @default(autoincrement())
  transactionId           String         @unique
  pidx                    String         @unique
  productId               Int
  amount                  Float
  dataFromVerificationReq Json?
  apiQueryFromUser        Json?
  paymentGateway          PaymentGateway
  status                  PaymentStatus  @default(PENDING)
  paymentDate             DateTime       @default(now())
  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @updatedAt
}

model PurchasedItem {
  id            Int            @id @default(autoincrement())
  item          String[]
  totalPrice    Float
  purchaseDate  DateTime       @default(now())
  paymentMethod PaymentGateway
  status        PaymentStatus  @default(PENDING)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  Invoice       Invoice?
  invoiceId     Int?           @unique

  @@index([item])
}

model Invoice {
  id            Int           @id @default(autoincrement())
  firstName     String
  lastName      String?
  country       String
  streetAddress String
  postalCode    String
  phone         String
  email         String
  user          Int
  orderId       Int           @unique
  order         PurchasedItem @relation(fields: [orderId], references: [id])
}
